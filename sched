#!/bin/bash

# save stdout
exec 3>&1
#
#exec 2>/tmp/sched.log
#chmod a+w /tmp/sched.log
#set -x

# name to X10 controller mappings are in /usr/local/x10/x10config

# WARNING: these are also defined in sched_from_cron!!!
X10dir="/usr/local/x10"
tmp_schedule="${X10dir}/tmp_schedule"
last_schedule="${X10dir}/last_schedule"
next_sched_prefix="${X10dir}/next_schedule"

if [ "$1" = "-d" ]
then
    debugging=true
    shift
else
    debugging=;
fi

rm -f $tmp_schedule
> $tmp_schedule
chmod a+w $tmp_schedule

output()
{
    if [ "$debugging" ]
    then
	cat
    else
	tee -a $tmp_schedule
    fi
}


doxmas=maybe
dowater=maybe
doheat=maybe
vacation=no

#
# GLOBALS:
#   hour
#   minute
#

usage()
{
    cat <<EOF >&2
usage: $0 [-d]  keyword modifier
        use -d for debugging a new schedule without changing it
    Command keywords are:
        on,normal   - schedules everything to default values
        off,none    - eliminates any schedule, including any saved schedule
        rain,nowater - doesn't schedule any sprinklers
                  (in addition, turns water off immediately)
        water,norain - schedules water (default)
        heat    - schedules heat, no matter what month
        noheat  - no heat schedule, no matter what month
        vacation - vacation heat schedule, no water, "at home" lights.
        home    - regular default schedule (like 'on')
        xmas    - schedules xmas lights
        current - prints current schedule, without changing it
        cron    - prints default (cron) schedules, without changing them

    Command modifiers are:
        once      - The request is temporary. The default schedule
                    will be reapplied when cron is next scheduled
                    to run.  WARNING:  this is the default behavior.
        forever   - makes this the default schedule. This schedule
                    is reapplied whenever cron runs.    WARNING: old 
                    schedule is blown away, regardless of whether new 
                    schedule if valid!
        until DAY - make this the schedule until "DAY", at which time
                    the current schedule is restored.  "DAY" is the (possibly
                    abbreviated) name of a weekday.

    Defaults:   the schedule is modified just for now (i.e. cron will
            replace this with current schedule), as follows:
        heat is scheduled except in June, July, August, and September.
        water is scheduled.
        christmas lights are on in December and January.
        front porch light is always scheduled

    The vacation schedule keeps heat off, but turns it on for Sunday evenings,
    unless noheat is specified as well.
        

EOF
}

main()
{
    do_x10 reset a
    eventno=0

    set -- `date`
    month=$2

    echo Month is $month:

    # christmas ornaments
    case "$doxmas" in
    maybe)
	doxmas=no
	case $month in
	Dec|Jan|Feb)
	    doxmas=yes
	    ;;
	esac
	;;
    esac
    case "$doxmas" in
    yes)
	echo Scheduling xmas ornaments
	do_xmas_orn
	;;
    no)
	echo No xmas ornaments
	;;
    esac

    # lawn watering
    case "$dowater" in
    maybe)
	dowater=yes
	case $month in
	Nov|Dec|Jan|Feb|Mar)
	    echo No water scheduled from Nov through Mar
	    dowater=no
	    ;;
	esac
	;;
    esac
    case "$dowater" in
    no)
	echo Turning all water off now, in addition to unscheduling
	do_x10 turn allwater off now
	;;
    yes)
	echo Scheduling water
	do_water
	;;
    esac

    # thermostats
    case "$doheat" in
    maybe)
	doheat=yes
	case $month in
	May)
	    if [ $(date +%d) -gt 15 ]
	    then
		echo No heat scheduled after May 15th
		doheat=no
	    fi
	    ;;
	Jun|Jul|Aug|Sep)
	    echo No heat schedule in june, july, august, or september
	    doheat=no
	    ;;
	Oct)
	    if [ $(date +%d) -lt 8 ]
	    then
		echo No heat scheduled before Oct 8th
		doheat=no
	    fi
	    ;;
	esac
	;;
    esac
    echo Scheduling thermostats
    case "$doheat" in
    yes)
	do_heat
	;;
    no)
	echo No heat being scheduled
	do_no_heat
	;;
    esac


    # special vacation stuff
    case "$vacation" in
    yes)
	touch /tmp/on_vacation
	echo Scheduling vacation lamps
	do_vac_lights
	module allwater off 1:00 everyday 
	echo Turning water off now
	water_off_now
	echo Turning heat down now
	heat_off_now
	;;
    no)
	rm -f /tmp/on_vacation
	;;
    esac

    echo Scheduling lamps
    do_normal_lights

}

water_off_now()
{
    do_x10 turn allwater off now
}

do_water()
{

    #watertree Saturday Wednesday

    #watergrowing1 9 15
    watergrowing1 8 10 12 14 16
    #watergrowing2 10
    #watershrubs 8
    #waterside 11 
    #watergrown 5 Mon Tue Wed Thu Fri Sat Sun
    #watergrown 4 Mon Thu
    :
}


#
# Need to water new grass every day for short periods.
#
# args:
#   1... = hours
#
#   WARNING: length of time is hard coded below based on
#   the specific location of the sprinkler in quesion.
#
watergrowing1()
{
    for hr in $*
    do
	resetcycle $hr
	sprinkle middlerear for 4 everyday
	sprinkle lowerfront for 3 everyday
	sprinkle upperfront for 3 everyday
	sprinkle upperrear for 4 everyday
	alloff everyday
    done
}

watergrowing2()
{
    for hr in $*
    do
	resetcycle $hr
	sprinkle upperfront   for 20 everyday
	sprinkle middlefront   for 20 everyday
	sprinkle lowerfront   for 20 everyday
	sprinkle upperrear    for 20 everyday
	sprinkle lowerrear    for 20 everyday
	alloff everyday
    done
}

watershrubs()
{
    for hr in $*
    do
	resetcycle $hr
	sprinkle FIXMEbackleft   for 10 everyday
	waitfor 10
	sprinkle FIXMEbackleft   for 10 everyday
	alloff everyday
    done
}

waterside()
{
    for hr in $*
    do
	resetcycle $hr
	sprinkle FIXMEfrontright   for 30 everyday
	alloff everyday
    done
}


#
# args:
#   1=hour to start
#   2... = days
#
watergrown()
{
    hr=$1
    shift

    for day in $*
    do
	resetcycle $hr
	sprinkle middlefront     for 30 $day
	waitfor 1
	sprinkle upperfront     for 30 $day
	#waitfor 1
	#sprinkle lowerfront     for 30 $day

	#waitfor 150
	sprinkle lowerrear     for 30 $day
	waitfor 1
	sprinkle upperrear      for 30 $day
	alloff $day
    done
}


sprinkle()
{
    whichlawn=$1
    howlong=$3
    day=$4
    
    schedule $whichlawn normal $day $hour:$minute on
    waitfor $howlong
    schedule $whichlawn normal $day $hour:$minute off
}

alloff()
{
    schedule allwater normal $1 $hour:$minute off
}

waitfor()
{
    minute=`expr $minute + $1`
    while [ $minute -gt 59 ]
    do
	hour=`expr $hour + 1`
	minute=`expr $minute - 60`
    done
    if [ $minute -lt 10 ]
    then
	minute=0$minute
    fi
    if [ $hour -gt 23 ]
    then
	hour=0
    fi
}

resetcycle()
{
    if [ "$hour" = "$1" -a "$minute" != 00 ]
    then
	echo Warning:  hour overlap at $hour >&2
    fi
    hour=$1
    minute=00
}

#   module batteries off 12:00 everyday 
#   do_batteries # schedule trickle charger on motorcycle batteries
#do_batteries()
#{
#   module batteries on  20:00 everyday 
#   module batteries off 20:15 everyday 
#   module batteries off 21:00 everyday 
#   module batteries off 22:00 everyday 
#   module batteries off 00:00 everyday 
#   module batteries off 02:00 everyday 
#   module batteries off 04:00 everyday 
#   module batteries off 08:00 everyday 
#   module batteries off 14:00 everyday 
#}

do_normal_lights()
{

    # living room, teak chest
    schedule livlamp2 security everyday sunset-0:20 on
    module livlamp2 off 23:15 sunday
    module livlamp2 off 23:15 monday
    module livlamp2 off 23:15 wednesday
    module livlamp2 off 23:15 thursday
    # pick up tuesday, friday, saturday here:
    module livlamp2 off 00:02 everyday

    # front porch
    module frontporch on sunset+0:30 everyday
    module frontporch off 00:01 weekdays
    module frontporch off 00:55 everyday
    module frontporch off 00:59 everyday

    # (higher is dimmer, range is 0 to 15.
    # off 'til we reduce its power: module rearspot "dim 8" sunset+1:00 everyday
    # module rearspot off sunrise-1:00 everyday
    module rearspot off 1:30 everyday
}

do_chargers()
{
    # battery chargers
    module chargers on 6:00 everyday
    module chargers off 10:00 everyday
}

do_xmas_orn()
{
    schedule xmasorn normal everyday sunset-0:30 on
    schedule xmasorn normal everyday sunset-0:28 on
    #schedule xmasorn normal everyday 00:30 off
    schedule xmasorn normal everyday 23:30 off
}

do_vac_lights()
{
    schedule livlamp1 security everyday sunset+0:45 on
# undo after hawaii vacation
#    schedule livlamp1 security everyday sunset+1:20 off
#    schedule livlamp1 security everyday 21:05 on
    schedule livlamp1 security everyday 23:00 off

    # schedule livlamp2 security everyday sunset+1:00 on
    # schedule livlamp2 security everyday 22:30 off

# undo after hawaii vacation (s/pgflamp/tvlamp)
    schedule pgflamp security everyday sunset+0:54 on
    schedule pgflamp security everyday sunset+2:00 off
    schedule pgflamp security everyday 22:35 on
    schedule pgflamp security everyday 23:20 off

    schedule dinlamp security everyday 19:00 on
    schedule dinlamp security everyday 21:00 off
}


do_heat()
{
    # on in the morning
    module highthermostat on 7:15 weekends
    module highthermostat on 6:45 weekdays

    # off for the day ...
    module highthermostat off 8:15 weekdays

    # ... and back on for the evening during the week
    module highthermostat on sunset-0:10 everyday

    # and off at night...
    module highthermostat off 22:40 sunday
    module highthermostat off 22:40 monday
    module highthermostat off 22:40 tuesday
    module highthermostat off 22:40 wednesday
    module highthermostat off 22:40 thursday

    # ... but later on weekends
    module highthermostat off 23:40 friday
    module highthermostat off 23:40 saturday

    # and an extra, in case we turn it up for some reason
    module highthermostat off 23:59 everyday


    # sunroom gets turned off automatically, but never on
    module sunroomsetback on   9:00 weekdays
    module sunroomsetback on  00:59 everyday

}

do_no_heat()
{
    module highthermostat off 8:00 everyday
    module sunroomsetback on 9:00 everyday

    module highthermostat off 22:40 everyday
    module sunroomsetback on 23:00 weekdays
}

heat_off_now()
{
    do_x10 turn highthermostat off now
    do_x10 turn sunroomsetback on now

    module highthermostat off 22:40 everyday
    module sunroomsetback on 23:00 weekdays
}

module()
{
    which="$1"
    setting="$2"
    time="$3"
    shift 3

    for day in $*
    do
	schedule $which normal $day $time $setting
    done
}

schedule()
{
    do_x10 schedule $* $eventno
    eventno=`expr $eventno + 1`
}

delete()
{
    do_x10 delete events $1-$2
}


#if debugging, the "x10" commands are just echo'd, and not executed
#if [ "$1" = "-d" ]
#then
#    do_x10()
#    {
#	echo x10 $*
#    }
#    shift
#else
#    do_x10()
#    {
#	x10 $* || exit 1
#	echo x10 $* >>$tmp_schedule
#    }
#fi

do_x10()
{
    echo x10 $*
    if [ ! "$debugging" ]
    then
	x10 $* >&3 || exit 1
    fi
}

process_args()
{
    echo "# sched invoked with args:" "$@" | output

    case $1 in
	rain*|nowater*)
	    dowater=no
	    ;;
	norain*|water*)
	    dowater=yes
	    ;;
	vacat*)
	    vacation=yes
	    dowater=no
	    doheat=no
	    ;;
	special)
	    vacation=yes
	    dowater=yes
	    doheat=no
	    ;;
	noxmas*)
	    doxmas=no
	    ;;
	xmas*)
	    doxmas=yes
	    ;;
	noheat*)
	    doheat=no
	    ;;
	heat*)
	    doheat=yes
	    ;;
	on|home|normal)
	    # run the schedule normally
	    dowater=maybe
	    doheat=maybe
	    doxmas=maybe
	    ;;

	off|reset)    # reset the cp290
	    ( do_x10 reset a
	      do_x10 dump events
	    ) | output
	    test "$debugging" || mv $tmp_schedule $last_schedule
	    exit
	    ;;

	show|current)   # just dump all scheduled events
	    do_x10 dump events | output
	    exit
	    ;;

	last) # show the previous schedule
	    cat $last_schedule
	    exit
	    ;;

	cron)
	    # show schedule used by cron
	    if [ -f $last_schedule ]
	    then
		echo The current schedule is:
		cat $last_schedule
		next_schedule=`ls $next_sched_prefix.* 2>/dev/null`
		if [ "$next_schedule" ]
		then
		    echo "The next schedule ($next_schedule) is:"
		    cat $next_schedule
		else
		    echo There is no "next" schedule for cron to pick up.
		fi
	    else
		echo "No default schedule for cron"
	    fi
	    exit
	    ;;

	*)
	    usage
	    exit
	    ;;
    esac


    if [ $# = 2 -o $# = 3 ]
    then
	case $2 in
	forever)
	    # save away schedule for cron to use
	    rm -f $next_sched_prefix.*
	    ;;

	once)
	    # this is the default behavior -- it overrides "until"!
	    rm -f $next_sched_prefix.*
	    ;;

	until)
	    # provide a day-of-week on which to end
	    case $3 in
		[Mm]on*)	dayofweek=mon ;;
		[Tt]ue*)	dayofweek=tue ;;
		[Ww]ed*)	dayofweek=wed ;;
		[Tt]hu*)	dayofweek=thu ;;
		[Ff]ri*)	dayofweek=fri ;;
		[Ss]at*)	dayofweek=sat ;;
		[Ss]un*)	dayofweek=sun ;;
		*)	    usage;  exit  ;;
	    esac
	    next_schedule=$next_sched_prefix.$dayofweek
	    ;;

	*)
	    usage
	    exit
	    ;;
	esac
    fi
}

process_args "$@"

( main
  do_x10 dump events
) | output

if [ "$next_schedule" ]
then
    mv $last_schedule $next_schedule
fi
test "$debugging" || mv $tmp_schedule $last_schedule

