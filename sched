#!/bin/sh

main()
{
	do_x10 reset a
	eventno=0

	# schedule the thermostat
	do_heat

	# schedule the trickle charger on the motorcycle batteries
	do_batteries

	# run the sprinklers
	#do_water

	do_x10 dump events
}

do_water()
{
	#watertree Saturday Wednesday

	watergrowing 11 15
	# watergrown 8
}

# don't overwater the new grass seed
watergrowing()
{

	for hr in $*
	do
		resetcycle $hr
		sprinkle backleft for	10
		sprinkle backright for	10
		sprinkle frontleft for	10
		sprinkle frontright for	10
		alloff
	done

}

watergrown()
{

	for hr in $*
	do
		resetcycle $hr
		sprinkle backleft for	40
		sprinkle backright for	15
		sprinkle frontleft for	40
		sprinkle frontright for	40
		alloff
	done

}

waterlawn()
{

	for hr in $*
	do
		resetcycle $hr
		sprinkle backleft for   7
		sprinkle backright for  15
		sprinkle frontleft for  15
		sprinkle frontright for 15
		alloff
	done

}

watertree()
{

	whichhose=backleft
	when=7
	howlong=30 	# 59 max

	for day in $*
	do
		schedule $whichhose normal $day $when:00 on
		schedule $whichhose normal $day $when:$howlong off
	done

	schedule allwater normal everyday $when:59 off

}

sprinkle()
{
	whichlawn=$1
	howlong=$3

	schedule $whichlawn normal everyday $hour:$minute on
	waitfor $howlong
	schedule $whichlawn normal everyday $hour:$minute off
}

alloff()
{
	schedule allwater normal everyday $hour:$minute off
}

waitfor()
{
	minute=`expr $minute + $1`
	if [ $minute -gt 59 ]
	then
		hour=`expr $hour + 1`
		minute=`expr $minute - 60`
	fi
	if [ $minute -lt 10 ]
	then
		minute=0$minute
	fi
	if [ $hour -gt 23 ]
	then
		hour=0
	fi
}

resetcycle()
{
	if [ "$hour" = "$1" -a "$minute" != 00 ]
	then
		echo Warning:  hour overlap at $hour >&2
	fi
	hour=$hr
	minute=00
}

do_batteries()
{
	batteries on  20:00 everyday 
	batteries off 20:07 everyday 
	batteries off 21:00 everyday 
	batteries off 22:00 everyday 
	batteries off 00:00 everyday 
	batteries off 02:00 everyday 
	batteries off 04:00 everyday 
}

batteries()
{
	time="$2"
	days="$3"
	if [ "$1" = "on" ]
	then
		schedule batteries normal $days $time on
	elif [ "$1" = "off" ]
	then
		schedule batteries normal $days $time off
	else
		echo huh?
	fi
}


do_heat()
{


	heat up 6:05 weekdays
	heat down 8:00 weekdays

	heat up 17:45 weekdays
	heat down 22:50 weekdays

	heat up 6:40 weekends
	heat up 17:45 weekends
	heat down 23:35 weekends

	# heat down 18:00 friday
	# heat up 18:00 sunday

}

heat()
{
	time="$2"
	days="$3"
	if [ "$1" = "up" ]
	then
		schedule high_thermostat normal $days $time on
	elif [ "$1" = "down" ]
	then
		schedule high_thermostat normal $days $time off
	else
		echo huh?
	fi
}

schedule()
{
	# schedule the event, passing in the slot number.  much faster
	#  than letting it find a free one.
	do_x10 schedule $* $eventno
	eventno=`expr $eventno + 1`
}

delete()
{
	do_x10 delete events $1-$2
}


#if debugging, the "x10" commands are just echo'd, and not executed
if [ "$1" = "-d" ]
then
	do_x10()
	{
		echo x10 $*
	}
	shift
else
	do_x10()
	{
		x10 $* || exit 1
	}
fi

case $1 in
	on)	# run the schedule normally
		;;

	off)	# reset the cp290
		do_x10 reset a
		do_x10 dump events
		exit
		;;

	show)	# just dump all scheduled events
		do_x10 dump events
		exit
		;;

	"")
		echo "usage: sched [ -d ] { on | off | show }"
		exit
		;;
esac



main 

